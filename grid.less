/*
* SDN Framework: Grid
*
* Grid classes with responsive conditions
*
* .cf - Micro Clearfix by Nicholas Gallager http://nicolasgallagher.com/micro-clearfix-hack/
*
* .row - container for columns, columns should always be placed inside a .row
*
* .row-inverted or .row-flip
*	- Represents an inverted row
*	- In an inverted row, the first element on the DOM will start from the right,
*	where in a normal row, it starts from the left
*
* .col-* - Column, the number represents the width of the column (1 to 12)
*
* .m-col-* - Apply to medium resolution screens
* .s-col-* - Apply to small resolution screens
*
* .*-hidden - Hidden on the specified size (l, m, and s)
* .*-visible - Visible on the specified size (l, m, and s)
*
* Examples
*
* class="col-5" - Column with 5 out of 12 width
* class="col-3 m-col-6 s-col-12" - Column 5 on normal screens, column 6 on medium screens and column 12 on small screens
* class="s-hidden" - Hidden only in small resolution screens
* class="l-visible" - Visible only on large/normal resolution screens
*
* You must define the following variables with values of your choosing
*
* @gridRefWidth:		972;	// 16 - 976 / 12 - 972
* @gridRefGutter:		22;		// 16 - 16 / 12 - 12
* @gridRefColumn:		59;		// 16 - 45 / 12 - 69
* @gridColumns:			12;		// 16 - 16 / 12 - 12
*
* @gridViewportSmall:	480px;
* @gridViewportMedium:	800px; // 768px ??
*
*/

// Grid width (960) + (1 * gutter)

//@gridRefColumnWidth: (@gridRefWidth + @gridRefGutter) / @gridColumns;
@gridRefColumnWidth:	@gridRefColumn + @gridRefGutter;

//@gridWidth: @gridRefWidth;
//@gridGutter: @gridRefGutter;
//@gridColumnWidth: @gridRefColumnWidth;

@gridWidth:				100;
@gridGutter:			(@gridRefGutter * @gridWidth) / @gridRefWidth;
@gridColumnWidth:		(@gridRefColumnWidth * @gridWidth) / @gridRefWidth;

//@gridUnit: 1px;
@gridUnit:				1%;

// Calculate column width
.column(@column) {
	width: ((@gridColumnWidth * @column) - @gridGutter) * @gridUnit;
}

// Breakpoints
//@gridViewportSmall:		480px;
@gridViewportSmallMax:	(@gridViewportSmall - 1);

//@gridViewportMedium:	800px; // 768px ??
@gridViewportMediumMax:	(@gridViewportMedium - 1);

//Clearfixing Elements
.cf {
	zoom: 1;
	&:before,
	&:after {
		content:'';
		display:table;
	}
	&:after {
		clear: both;
	}
}

.container {
	max-width: 960px;
	margin-left: auto;
	margin-right: auto;
}

//.column,
.col {

	&-1   { .column(1); }
	&-2   { .column(2); }
	&-3   { .column(3); }
	&-4   { .column(4); }
	&-5   { .column(5); }
	&-6   { .column(6); }
	&-7   { .column(7); }
	&-8   { .column(8); }
	&-9   { .column(9); }
	&-10  { .column(10); }
	&-11  { .column(11); }
	&-12  { .column(12); }

}

//.column,
.col {

	&-1,
	&-2,
	&-3,
	&-4,
	&-5,
	&-6,
	&-7,
	&-8,
	&-9,
	&-10,
	&-11,
	&-12 {
		float: left;
		position: relative;
		margin-left: @gridGutter * @gridUnit;
	}
}

.row {
	.cf;
//	position: relative;
//	overflow: hidden;
	margin-left: @gridGutter * -@gridUnit;
	width: (@gridWidth + @gridGutter) * @gridUnit;
}
.row-inverted,
.row-flip {
	.cf;
	margin-right: @gridGutter * -@gridUnit;
	width: (@gridWidth + @gridGutter) * @gridUnit;

	//> .column,
	> .col {

		&-1,
		&-2,
		&-3,
		&-4,
		&-5,
		&-6,
		&-7,
		&-8,
		&-9,
		&-10,
		&-11,
		&-12 {
			float: right;
			margin-left: 0;
			margin-right: @gridGutter * @gridUnit;
		}
	}
}
ul {
	&.row,
	&.row-inverted,
	&.row-flip {
		padding: 0;
		list-style: none;
	}
}

// Make all elements visible
.grid-debug * {
	background-color: rgba(0,0,0,0.05);
}

@media only screen and (max-width: @gridViewportMediumMax) {

	//.tablet-column,
	//.medium-column,
	.m-col {

		&-1		{ .column(1); }
		&-2		{ .column(2); }
		&-3		{ .column(3); }
		&-4		{ .column(4); }
		&-5		{ .column(5); }
		&-6		{ .column(6); }
		&-7		{ .column(7); }
		&-8		{ .column(8); }
		&-9		{ .column(9); }
		&-10	{ .column(10); }
		&-11	{ .column(11); }
		&-12	{ .column(12); }

	}
}

@media only screen and (max-width: @gridViewportSmallMax) {

	//.mobile-column,
	//.small-column,
	.s-col {

		&-1		{ .column(1); }
		&-2		{ .column(2); }
		&-3		{ .column(3); }
		&-4		{ .column(4); }
		&-5		{ .column(5); }
		&-6		{ .column(6); }
		&-7		{ .column(7); }
		&-8		{ .column(8); }
		&-9		{ .column(9); }
		&-10	{ .column(10); }
		&-11	{ .column(11); }
		&-12	{ .column(12); }

	}
}